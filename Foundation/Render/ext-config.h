#pragma once

#ifndef USE_PNG
#define USE_PNG
#endif

#ifndef USE_JPEG
#define USE_JPEG
#endif

#ifndef USE_FFMPEG
#define USE_FFMPEG
#endif

#ifndef USE_FREETYPE
#define USE_FREETYPE
#endif

#ifndef USE_GLEW
#define USE_GLEW
#endif

/*
#ifndef USE_OPENGL
#define USE_OPENGL
#endif
*/

#ifndef USE_GLUT
#define USE_GLUT
#endif

#ifndef USE_FMOD
#define USE_FMOD
#endif

#ifndef USE_3DS
#define USE_3DS
#endif

#ifndef USE_OBJ
#define USE_OBJ
#endif

#ifndef USE_FBX
#define USE_FBX
#endif

#ifndef USE_TGA
#define USE_TGA
#endif

#include "system.h"
#include "third_party.h"

#define SHOW_ERROR_CODE(EID, CODE, MSG) if (EID == CODE) PRINT("OpenGL error id %d, message: %s.\n", CODE, #MSG);

#define SHOW_OPENGL_ERROR_MESSAGE() { \
	int EID = glGetError(); \
	SHOW_ERROR_CODE(EID, GL_INVALID_ENUM, GL_INVALID_ENUM); \
	SHOW_ERROR_CODE(EID, GL_INVALID_VALUE, GL_INVALID_VALUE); \
	SHOW_ERROR_CODE(EID, GL_INVALID_OPERATION, GL_INVALID_OPERATION); \
	SHOW_ERROR_CODE(EID, GL_STACK_OVERFLOW, GL_STACK_OVERFLOW); \
	SHOW_ERROR_CODE(EID, GL_STACK_UNDERFLOW, GL_STACK_UNDERFLOW); \
	SHOW_ERROR_CODE(EID, GL_OUT_OF_MEMORY, GL_OUT_OF_MEMORY); \
	ASSERT(EID == 0); \
}

// 雾的类型
enum FogMode
{
	EFM_EXP = GL_EXP,
	EFM_EXP2 = GL_EXP2,
	EFM_LINEAR = GL_LINEAR,
};

// 雾的效果类型
enum FogEffect
{
	EFE_DONT_CARE = GL_DONT_CARE,
	EFE_NICEST = GL_NICEST,
	EFE_FASTEST = GL_FASTEST,
};

// 光索引
enum LightIndex
{
	ELI_NONE,
	ELI_LIGHT0 = GL_LIGHT0,
	ELI_LIGHT1 = GL_LIGHT1,
	ELI_LIGHT2 = GL_LIGHT2,
	ELI_LIGHT3 = GL_LIGHT3,
	ELI_LIGHT4 = GL_LIGHT4,
	ELI_LIGHT5 = GL_LIGHT5,
	ELI_LIGHT6 = GL_LIGHT6,
	ELI_LIGHT7 = GL_LIGHT7,
};

// 裁剪平面
enum ClipPlaneIndex
{
	ECPI_NONE,
	ECPI_CLIPPLANE0 = GL_CLIP_PLANE0,
	ECPI_CLIPPLANE1 = GL_CLIP_PLANE1,
	ECPI_CLIPPLANE2 = GL_CLIP_PLANE2,
	ECPI_CLIPPLANE3 = GL_CLIP_PLANE3,
	ECPI_CLIPPLANE4 = GL_CLIP_PLANE4,
	ECPI_CLIPPLANE5 = GL_CLIP_PLANE5,
};

// 像素格式
enum PixelFormat
{
	EPF_NONE,
	EPF_COLOR_INDEX = GL_COLOR_INDEX,
	EPF_STENCIL_INDEX = GL_STENCIL_INDEX,
	EPF_DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	EPF_RED = GL_RED,
	EPF_GREEN = GL_GREEN,
	EPF_BLUE = GL_BLUE,
	EPF_ALPHA = GL_ALPHA,
	EPF_RGB = GL_RGB,
	EPF_RGBA = GL_RGBA,
	EPF_LUMINANCE = GL_LUMINANCE,
	EPF_LUMINANCE_ALPHA = GL_LUMINANCE_ALPHA,
};

// 开始模式
enum BeginMode
{
	EBM_POINTS = GL_POINTS,
	EBM_LINES = GL_LINES,
	EBM_LINE_LOOP = GL_LINE_LOOP,
	EBM_LINE_STRIP = GL_LINE_STRIP,
	EBM_TRIANGLES = GL_TRIANGLES,
	EBM_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
	EBM_TRIANGLE_FAN = GL_TRIANGLE_FAN,
	EBM_QUADS = GL_QUADS,
	EBM_QUAD_STRIP = GL_QUAD_STRIP,
	EBM_POLYGON = GL_POLYGON,
};

// 混合源因子
enum BlendingFactorSrc
{
	EBFS_ZERO = GL_ZERO,
	EBFS_ONE = GL_ONE,
	EBFS_DST_COLOR = GL_DST_COLOR,
	EBFS_ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
	EBFS_SRC_ALPHA_SATURATE = GL_SRC_ALPHA_SATURATE,
	EBFS_SRC_ALPHA = GL_SRC_ALPHA,
	EBFS_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
	EBFS_DST_ALPHA = GL_DST_ALPHA,
	EBFS_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
};

// 混合目标因子
enum BlendingFactorDest
{
	EBFD_ZERO = GL_ZERO,
	EBFD_ONE = GL_ONE,
	EBFD_SRC_COLOR = GL_SRC_COLOR,
	EBFD_ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
	EBFD_SRC_ALPHA = GL_SRC_ALPHA,
	EBFD_ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
	EBFD_DST_ALPHA = GL_DST_ALPHA,
	EBFD_ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
};