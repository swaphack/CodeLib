#pragma once

#include "ext-config.h"

enum class AccumOp
{
	ACCUM	= GL_ACCUM,
	LOAD	= GL_LOAD,
	RETURN	= GL_RETURN,
	MULT	= GL_MULT,
	ADD		= GL_ADD
};

enum class AlphaFunction
{
	NEVER = GL_NEVER,
	LESS = GL_LESS, 
	EQUAL = GL_EQUAL,
	LEQUAL = GL_LEQUAL,
	GREATER = GL_GREATER,
	NOTEQUAL = GL_NOTEQUAL,
	GEQUAL = GL_GEQUAL,
	ALWAYS = GL_ALWAYS,
};

enum class AttribMask
{
	CURRENT_BIT = GL_CURRENT_BIT,
	POINT_BIT = GL_POINT_BIT,
	LINE_BIT = GL_LINE_BIT,
	POLYGON_BIT = GL_POLYGON_BIT,
	POLYGON_STIPPLE_BIT = GL_POLYGON_STIPPLE_BIT,
	PIXEL_MODE_BIT = GL_PIXEL_MODE_BIT,
	LIGHTING_BIT = GL_LIGHTING_BIT,
	FOG_BIT = GL_FOG_BIT,
	DEPTH_BUFFER_BIT = GL_DEPTH_BUFFER_BIT,
	ACCUM_BUFFER_BIT = GL_ACCUM_BUFFER_BIT,
	STENCIL_BUFFER_BIT = GL_STENCIL_BUFFER_BIT,
	VIEWPORT_BIT = GL_VIEWPORT_BIT,
	TRANSFORM_BIT = GL_TRANSFORM_BIT,
	ENABLE_BIT = GL_ENABLE_BIT,
	COLOR_BUFFER_BIT = GL_COLOR_BUFFER_BIT,
	HINT_BIT = GL_HINT_BIT,
	EVAL_BIT = GL_EVAL_BIT,
	LIST_BIT = GL_LIST_BIT,
	TEXTURE_BIT = GL_TEXTURE_BIT,
	SCISSOR_BIT = GL_SCISSOR_BIT,
	ALL_ATTRIB_BITS = GL_ALL_ATTRIB_BITS,
};

enum class ShapeMode
{
	POINTS = GL_POINTS,
	LINES = GL_LINES,
	LINE_LOOP = GL_LINE_LOOP,
	LINE_STRIP = GL_LINE_STRIP,
	TRIANGLES = GL_TRIANGLES,
	TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
	TRIANGLE_FAN = GL_TRIANGLE_FAN,
	QUADS = GL_QUADS,
	QUAD_STRIP = GL_QUAD_STRIP,
	POLYGON = GL_POLYGON,
};

enum class BlendingFactorSrc
{
	ZERO = GL_ZERO,
	ONE = GL_ONE,
	SRC_COLOR = GL_SRC_COLOR,
	ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
	DST_COLOR = GL_DST_COLOR,
	ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
	SRC_ALPHA = GL_SRC_ALPHA,
	ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
	DST_ALPHA = GL_DST_ALPHA,
	ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
	CONSTANT_COLOR = GL_CONSTANT_COLOR,
	ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
	CONSTANT_ALPHA = GL_CONSTANT_ALPHA,
	ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA
};

enum class BlendingFactorDest
{
	ZERO = GL_ZERO,
	ONE = GL_ONE,
	SRC_COLOR = GL_SRC_COLOR,
	ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
	DST_COLOR = GL_DST_COLOR,
	ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
	SRC_ALPHA = GL_SRC_ALPHA,
	ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
	DST_ALPHA = GL_DST_ALPHA,
	ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
	CONSTANT_COLOR = GL_CONSTANT_COLOR,
	ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
	CONSTANT_ALPHA = GL_CONSTANT_ALPHA,
	ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA
};

enum class Boolean
{
	BTRUE = GL_TRUE,
	BFALSE = GL_FALSE,
};

enum class ClearBufferMask
{
	COLOR_BUFFER_BIT = GL_COLOR_BUFFER_BIT,
	ACCUM_BUFFER_BIT = GL_ACCUM_BUFFER_BIT,
	STENCIL_BUFFER_BIT = GL_STENCIL_BUFFER_BIT,
	DEPTH_BUFFER_BIT = GL_DEPTH_BUFFER_BIT,
};

enum class ClientArrayType
{
	VERTEX_ARRAY = GL_VERTEX_ARRAY,
	NORMAL_ARRAY = GL_NORMAL_ARRAY,
	COLOR_ARRAY = GL_COLOR_ARRAY,
	INDEX_ARRAY = GL_INDEX_ARRAY,
	TEXTURE_COORD_ARRAY = GL_TEXTURE_COORD_ARRAY,
	EDGE_FLAG_ARRAY = GL_EDGE_FLAG_ARRAY,
};

enum class ClipPlaneName
{
	CLIP_PLANE0 = GL_CLIP_PLANE0,
	CLIP_PLANE1 = GL_CLIP_PLANE1,
	CLIP_PLANE2 = GL_CLIP_PLANE2,
	CLIP_PLANE3 = GL_CLIP_PLANE3,
	CLIP_PLANE4 = GL_CLIP_PLANE4,
	CLIP_PLANE5 = GL_CLIP_PLANE5,
};

enum class ColorMaterialParameter
{
	AMBIENT = GL_AMBIENT,
	DIFFUSE = GL_DIFFUSE,
	SPECULAR = GL_SPECULAR,
	EMISSION = GL_EMISSION,
	AMBIENT_AND_DIFFUSE = GL_AMBIENT_AND_DIFFUSE,
};

enum class ColorPointerType
{
	BYTE = GL_BYTE,
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	SHORT = GL_SHORT,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	INT = GL_INT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
	FLOAT = GL_FLOAT,
	DOUBLE = GL_DOUBLE,
};

enum class DataType
{
	BYTE = GL_BYTE,
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	SHORT = GL_SHORT,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	INT = GL_INT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
	FLOAT = GL_FLOAT,
	BYTES2 = GL_2_BYTES,
	BYTES3 = GL_4_BYTES,
	BYTES4 = GL_4_BYTES,
	DOUBLE = GL_DOUBLE,
};

enum class DepthFunction
{
	NEVER = GL_NEVER,
	LESS = GL_LESS,
	EQUAL = GL_EQUAL,
	LEQUAL = GL_LEQUAL,
	GREATER = GL_GREATER,
	NOTEQUAL = GL_NOTEQUAL,
	GEQUAL = GL_GEQUAL,
	ALWAYS = GL_ALWAYS,
};

enum class DrawBufferMode
{
	NONE = GL_NONE,
	FRONT_LEFT = GL_FRONT_LEFT,
	FRONT_RIGHT = GL_FRONT_RIGHT,
	BACK_LEFT = GL_BACK_LEFT,
	BACK_RIGHT = GL_BACK_RIGHT,
	FRONT = GL_FRONT,
	BACK = GL_BACK,
	LEFT = GL_LEFT,
	RIGHT = GL_RIGHT,
	FRONT_AND_BACK = GL_FRONT_AND_BACK,
	AUX0 = GL_AUX0,
	AUX1 = GL_AUX1,
	AUX2 = GL_AUX2,
	AUX3 = GL_AUX3,
};

enum class EnableModel
{
	FOG = GL_FOG,
	LIGHTING = GL_LIGHTING,
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	LINE_STIPPLE = GL_LINE_STIPPLE,
	POLYGON_STIPPLE = GL_POLYGON_STIPPLE,
	CULL_FACE = GL_CULL_FACE,
	ALPHA_TEST = GL_ALPHA_TEST,
	BLEND = GL_BLEND,
	INDEX_LOGIC_OP = GL_INDEX_LOGIC_OP,
	COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP,
	DITHER = GL_DITHER,
	STENCIL_TEST = GL_STENCIL_TEST,
	DEPTH_TEST = GL_DEPTH_TEST,
	CLIP_PLANE0 = GL_CLIP_PLANE0,
	CLIP_PLANE1 = GL_CLIP_PLANE1,
	CLIP_PLANE2 = GL_CLIP_PLANE2,
	CLIP_PLANE3 = GL_CLIP_PLANE3,
	CLIP_PLANE4 = GL_CLIP_PLANE4,
	CLIP_PLANE5 = GL_CLIP_PLANE5,
	LIGHT0 = GL_LIGHT0,
	LIGHT1 = GL_LIGHT1,
	LIGHT2 = GL_LIGHT2,
	LIGHT3 = GL_LIGHT3,
	LIGHT4 = GL_LIGHT4,
	LIGHT5 = GL_LIGHT5,
	LIGHT6 = GL_LIGHT6,
	LIGHT7 = GL_LIGHT7,
	TEXTURE_GEN_S = GL_TEXTURE_GEN_S,
	TEXTURE_GEN_T = GL_TEXTURE_GEN_T,
	TEXTURE_GEN_R = GL_TEXTURE_GEN_R,
	TEXTURE_GEN_Q = GL_TEXTURE_GEN_Q,
	MAP1_VERTEX_3 = GL_MAP1_VERTEX_3,
	MAP1_VERTEX_4 = GL_MAP1_VERTEX_4,
	MAP1_COLOR_4 = GL_MAP1_COLOR_4,
	MAP1_INDEX = GL_MAP1_INDEX,
	MAP1_NORMAL = GL_MAP1_NORMAL,
	MAP1_TEXTURE_COORD_1 = GL_MAP1_TEXTURE_COORD_1,
	MAP1_TEXTURE_COORD_2 = GL_MAP1_TEXTURE_COORD_2,
	MAP1_TEXTURE_COORD_3 = GL_MAP1_TEXTURE_COORD_3,
	MAP1_TEXTURE_COORD_4 = GL_MAP1_TEXTURE_COORD_4,
	MAP2_VERTEX_3 = GL_MAP2_VERTEX_3,
	MAP2_VERTEX_4 = GL_MAP2_VERTEX_4,
	MAP2_COLOR_4 = GL_MAP2_COLOR_4,
	MAP2_INDEX = GL_MAP2_INDEX,
	MAP2_NORMAL = GL_MAP2_NORMAL,
	MAP2_TEXTURE_COORD_1 = GL_MAP2_TEXTURE_COORD_1,
	MAP2_TEXTURE_COORD_2 = GL_MAP2_TEXTURE_COORD_2,
	MAP2_TEXTURE_COORD_3 = GL_MAP2_TEXTURE_COORD_3,
	MAP2_TEXTURE_COORD_4 = GL_MAP2_TEXTURE_COORD_4,
	POINT_SMOOTH = GL_POINT_SMOOTH,
	LINE_SMOOTH = GL_LINE_SMOOTH,
	POLYGON_SMOOTH = GL_POLYGON_SMOOTH,
	SCISSOR_TEST = GL_SCISSOR_TEST,
	COLOR_MATERIAL = GL_COLOR_MATERIAL,
	NORMALIZE = GL_NORMALIZE,
	AUTO_NORMAL = GL_AUTO_NORMAL,
	VERTEX_ARRAY = GL_VERTEX_ARRAY,
	NORMAL_ARRAY = GL_NORMAL_ARRAY,
	COLOR_ARRAY = GL_COLOR_ARRAY,
	INDEX_ARRAY = GL_INDEX_ARRAY,
	TEXTURE_COORD_ARRAY = GL_TEXTURE_COORD_ARRAY,
	EDGE_FLAG_ARRAY = GL_EDGE_FLAG_ARRAY,
	POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT,
	POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE,
	POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
};


enum class ErrorCode
{
	NONE = GL_NO_ERROR,
	INVALID_ENUM = GL_INVALID_ENUM,
	INVALID_VALUE = GL_INVALID_VALUE,
	INVALID_OPERATION = GL_INVALID_OPERATION,
	STACK_OVERFLOW = GL_STACK_OVERFLOW,
	STACK_UNDERFLOW = GL_STACK_UNDERFLOW,
	OUT_OF_MEMORY = GL_OUT_OF_MEMORY,
};

enum class FeedBackMode
{
	D2 = GL_2D,
	D3 = GL_3D,
	D3_COLOR = GL_3D_COLOR,
	D3_COLOR_TEXTURE = GL_3D_COLOR_TEXTURE,
	D4_COLOR_TEXTURE = GL_4D_COLOR_TEXTURE,
};

enum class FeedBackToken
{
	PASS_THROUGH_TOKEN = GL_PASS_THROUGH_TOKEN,
	POINT_TOKEN = GL_POINT_TOKEN,
	LINE_TOKEN = GL_LINE_TOKEN,
	POLYGON_TOKEN = GL_POLYGON_TOKEN,
	BITMAP_TOKEN = GL_BITMAP_TOKEN,
	DRAW_PIXEL_TOKEN = GL_DRAW_PIXEL_TOKEN,
	COPY_PIXEL_TOKEN = GL_COPY_PIXEL_TOKEN,
	LINE_RESET_TOKEN = GL_LINE_RESET_TOKEN,
};	

enum class FogMode
{
	EXP = GL_EXP,
	EXP2 = GL_EXP2,
	LINEAR = GL_LINEAR,
};

enum class FogParameter
{
	FOG_COLOR = GL_FOG_COLOR,
	FOG_DENSITY = GL_FOG_DENSITY,
	FOG_END = GL_FOG_END,
	FOG_INDEX = GL_FOG_INDEX,
	FOG_MODE = GL_FOG_MODE,
	FOG_START = GL_FOG_START,
};

// 绕行方向
enum class FrontFaceDirection
{
	// 顺时针
	CW = GL_CW,
	// 逆时针，默认
	CCW = GL_CCW,
};

enum class GetMapTarget
{
	COEFF = GL_COEFF,
	ORDER = GL_ORDER,
	MDOMAIN = GL_DOMAIN,
};

enum class GetPixelMap
{
	PIXEL_MAP_I_TO_I = GL_PIXEL_MAP_I_TO_I,
	PIXEL_MAP_S_TO_S = GL_PIXEL_MAP_S_TO_S,
	PIXEL_MAP_I_TO_R = GL_PIXEL_MAP_I_TO_R,
	PIXEL_MAP_I_TO_G = GL_PIXEL_MAP_I_TO_G,
	PIXEL_MAP_I_TO_B = GL_PIXEL_MAP_I_TO_B,
	PIXEL_MAP_I_TO_A = GL_PIXEL_MAP_I_TO_A,
	PIXEL_MAP_R_TO_R = GL_PIXEL_MAP_R_TO_R,
	PIXEL_MAP_G_TO_G = GL_PIXEL_MAP_G_TO_G,
	PIXEL_MAP_B_TO_B = GL_PIXEL_MAP_B_TO_B,
	PIXEL_MAP_A_TO_A = GL_PIXEL_MAP_A_TO_A,
};

enum class GetPointerTarget
{
	VERTEX_ARRAY_POINTER = GL_VERTEX_ARRAY_POINTER,
	NORMAL_ARRAY_POINTER = GL_NORMAL_ARRAY_POINTER,
	COLOR_ARRAY_POINTER = GL_COLOR_ARRAY_POINTER,
	INDEX_ARRAY_POINTER = GL_INDEX_ARRAY_POINTER,
	TEXTURE_COORD_ARRAY_POINTER = GL_TEXTURE_COORD_ARRAY_POINTER,
	EDGE_FLAG_ARRAY_POINTER = GL_EDGE_FLAG_ARRAY_POINTER,
};

enum class GetTarget
{
	CURRENT_COLOR = GL_CURRENT_COLOR,
	CURRENT_INDEX = GL_CURRENT_INDEX,
	CURRENT_NORMAL = GL_CURRENT_NORMAL,
	CURRENT_TEXTURE_COORDS = GL_CURRENT_TEXTURE_COORDS,
	CURRENT_RASTER_COLOR = GL_CURRENT_RASTER_COLOR,
	CURRENT_RASTER_INDEX = GL_CURRENT_RASTER_INDEX,
	CURRENT_RASTER_TEXTURE_COORDS = GL_CURRENT_RASTER_TEXTURE_COORDS,
	CURRENT_RASTER_POSITION = GL_CURRENT_RASTER_POSITION,
	CURRENT_RASTER_POSITION_VALID = GL_CURRENT_RASTER_POSITION_VALID,
	CURRENT_RASTER_DISTANCE = GL_CURRENT_RASTER_DISTANCE,
	POINT_SMOOTH = GL_POINT_SMOOTH,
	POINT_SIZE = GL_POINT_SIZE,
	POINT_SIZE_RANGE = GL_POINT_SIZE_RANGE,
	POINT_SIZE_GRANULARITY = GL_POINT_SIZE_GRANULARITY,
	LINE_SMOOTH = GL_LINE_SMOOTH,
	LINE_WIDTH = GL_LINE_WIDTH,
	LINE_WIDTH_RANGE = GL_LINE_WIDTH_RANGE,
	LINE_WIDTH_GRANULARITY = GL_LINE_WIDTH_GRANULARITY,
	LINE_STIPPLE = GL_LINE_STIPPLE,
	LINE_STIPPLE_PATTERN = GL_LINE_STIPPLE_PATTERN,
	LINE_STIPPLE_REPEAT = GL_LINE_STIPPLE_REPEAT,
	LIST_MODE = GL_LIST_MODE,
	MAX_LIST_NESTING = GL_MAX_LIST_NESTING,
	LIST_BASE = GL_LIST_BASE,
	LIST_INDEX = GL_LIST_INDEX,
	POLYGON_MODE = GL_POLYGON_MODE,
	POLYGON_SMOOTH = GL_POLYGON_SMOOTH,
	POLYGON_STIPPLE = GL_POLYGON_STIPPLE,
	EDGE_FLAG = GL_EDGE_FLAG,
	CULL_FACE = GL_CULL_FACE,
	CULL_FACE_MODE = GL_CULL_FACE_MODE,
	FRONT_FACE = GL_FRONT_FACE,
	LIGHTING = GL_LIGHTING,
	LIGHT_MODEL_LOCAL_VIEWER = GL_LIGHT_MODEL_LOCAL_VIEWER,
	LIGHT_MODEL_TWO_SIDE = GL_LIGHT_MODEL_TWO_SIDE,
	LIGHT_MODEL_AMBIENT = GL_LIGHT_MODEL_AMBIENT,
	SHADE_MODEL = GL_SHADE_MODEL,
	COLOR_MATERIAL_FACE = GL_COLOR_MATERIAL_FACE,
	COLOR_MATERIAL_PARAMETER = GL_COLOR_MATERIAL_PARAMETER,
	COLOR_MATERIAL = GL_COLOR_MATERIAL,
	FOG = GL_FOG,
	FOG_INDEX = GL_FOG_INDEX,
	FOG_DENSITY = GL_FOG_DENSITY,
	FOG_START = GL_FOG_START,
	FOG_END = GL_FOG_END,
	FOG_MODE = GL_FOG_MODE,
	FOG_COLOR = GL_FOG_COLOR,
	DEPTH_RANGE = GL_DEPTH_RANGE,
	DEPTH_TEST = GL_DEPTH_TEST,
	DEPTH_WRITEMASK = GL_DEPTH_WRITEMASK,
	DEPTH_CLEAR_VALUE = GL_DEPTH_CLEAR_VALUE,
	DEPTH_FUNC = GL_DEPTH_FUNC,
	ACCUM_CLEAR_VALUE = GL_ACCUM_CLEAR_VALUE,
	STENCIL_TEST = GL_STENCIL_TEST,
	STENCIL_CLEAR_VALUE = GL_STENCIL_CLEAR_VALUE,
	STENCIL_FUNC = GL_STENCIL_FUNC,
	STENCIL_VALUE_MASK = GL_STENCIL_VALUE_MASK,
	STENCIL_FAIL = GL_STENCIL_FAIL,
	STENCIL_PASS_DEPTH_FAIL = GL_STENCIL_PASS_DEPTH_FAIL,
	STENCIL_PASS_DEPTH_PASS = GL_STENCIL_PASS_DEPTH_PASS,
	STENCIL_REF = GL_STENCIL_REF,
	STENCIL_WRITEMASK = GL_STENCIL_WRITEMASK,
	MATRIX_MODE = GL_MATRIX_MODE,
	NORMALIZE = GL_NORMALIZE,
	VIEWPORT = GL_VIEWPORT,
	MODELVIEW_STACK_DEPTH = GL_MODELVIEW_STACK_DEPTH,
	PROJECTION_STACK_DEPTH = GL_PROJECTION_STACK_DEPTH,
	TEXTURE_STACK_DEPTH = GL_TEXTURE_STACK_DEPTH,
	MODELVIEW_MATRIX = GL_MODELVIEW_MATRIX,
	PROJECTION_MATRIX = GL_PROJECTION_MATRIX,
	TEXTURE_MATRIX = GL_TEXTURE_MATRIX,
	ATTRIB_STACK_DEPTH = GL_ATTRIB_STACK_DEPTH,
	CLIENT_ATTRIB_STACK_DEPTH = GL_CLIENT_ATTRIB_STACK_DEPTH,
	ALPHA_TEST = GL_ALPHA_TEST,
	ALPHA_TEST_FUNC = GL_ALPHA_TEST_FUNC,
	ALPHA_TEST_REF = GL_ALPHA_TEST_REF,
	DITHER = GL_DITHER,
	BLEND_DST = GL_BLEND_DST,
	BLEND_SRC = GL_BLEND_SRC,
	BLEND = GL_BLEND,
	LOGIC_OP_MODE = GL_LOGIC_OP_MODE,
	INDEX_LOGIC_OP = GL_INDEX_LOGIC_OP,
	COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP,
	AUX_BUFFERS = GL_AUX_BUFFERS,
	DRAW_BUFFER = GL_DRAW_BUFFER,
	READ_BUFFER = GL_READ_BUFFER,
	SCISSOR_BOX = GL_SCISSOR_BOX,
	SCISSOR_TEST = GL_SCISSOR_TEST,
	INDEX_CLEAR_VALUE = GL_INDEX_CLEAR_VALUE,
	INDEX_WRITEMASK = GL_INDEX_WRITEMASK,
	COLOR_CLEAR_VALUE = GL_COLOR_CLEAR_VALUE,
	COLOR_WRITEMASK = GL_COLOR_WRITEMASK,
	INDEX_MODE = GL_INDEX_MODE,
	RGBA_MODE = GL_RGBA_MODE,
	DOUBLEBUFFER = GL_DOUBLEBUFFER,
	STEREO = GL_STEREO,
	RENDER_MODE = GL_RENDER_MODE,
	PERSPECTIVE_CORRECTION_HINT = GL_PERSPECTIVE_CORRECTION_HINT,
	POINT_SMOOTH_HINT = GL_POINT_SMOOTH_HINT,
	LINE_SMOOTH_HINT = GL_LINE_SMOOTH_HINT,
	POLYGON_SMOOTH_HINT = GL_POLYGON_SMOOTH_HINT,
	FOG_HINT = GL_FOG_HINT,
	TEXTURE_GEN_S = GL_TEXTURE_GEN_S,
	TEXTURE_GEN_T = GL_TEXTURE_GEN_T,
	TEXTURE_GEN_R = GL_TEXTURE_GEN_R,
	TEXTURE_GEN_Q = GL_TEXTURE_GEN_Q,
	PIXEL_MAP_I_TO_I = GL_PIXEL_MAP_I_TO_I,
	PIXEL_MAP_S_TO_S = GL_PIXEL_MAP_S_TO_S,
	PIXEL_MAP_I_TO_R = GL_PIXEL_MAP_I_TO_R,
	PIXEL_MAP_I_TO_G = GL_PIXEL_MAP_I_TO_G,
	PIXEL_MAP_I_TO_B = GL_PIXEL_MAP_I_TO_B,
	PIXEL_MAP_I_TO_A = GL_PIXEL_MAP_I_TO_A,
	PIXEL_MAP_R_TO_R = GL_PIXEL_MAP_R_TO_R,
	PIXEL_MAP_G_TO_G = GL_PIXEL_MAP_G_TO_G,
	PIXEL_MAP_B_TO_B = GL_PIXEL_MAP_B_TO_B,
	PIXEL_MAP_A_TO_A = GL_PIXEL_MAP_A_TO_A,
	PIXEL_MAP_I_TO_I_SIZE = GL_PIXEL_MAP_I_TO_I_SIZE,
	PIXEL_MAP_S_TO_S_SIZE = GL_PIXEL_MAP_S_TO_S_SIZE,
	PIXEL_MAP_I_TO_R_SIZE = GL_PIXEL_MAP_I_TO_R_SIZE,
	PIXEL_MAP_I_TO_G_SIZE = GL_PIXEL_MAP_I_TO_G_SIZE,
	PIXEL_MAP_I_TO_B_SIZE = GL_PIXEL_MAP_I_TO_B_SIZE,
	PIXEL_MAP_I_TO_A_SIZE = GL_PIXEL_MAP_I_TO_A_SIZE,
	PIXEL_MAP_R_TO_R_SIZE = GL_PIXEL_MAP_R_TO_R_SIZE,
	PIXEL_MAP_G_TO_G_SIZE = GL_PIXEL_MAP_G_TO_G_SIZE,
	PIXEL_MAP_B_TO_B_SIZE = GL_PIXEL_MAP_B_TO_B_SIZE,
	PIXEL_MAP_A_TO_A_SIZE = GL_PIXEL_MAP_A_TO_A_SIZE,
	UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES,
	UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST,
	UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH,
	UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS,
	UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS,
	UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT,
	PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES,
	PACK_LSB_FIRST = GL_PACK_LSB_FIRST,
	PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH,
	PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS,
	PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS,
	PACK_ALIGNMENT = GL_PACK_ALIGNMENT,
	MAP_COLOR = GL_MAP_COLOR,
	MAP_STENCIL = GL_MAP_STENCIL,
	INDEX_SHIFT = GL_INDEX_SHIFT,
	INDEX_OFFSET = GL_INDEX_OFFSET,
	RED_SCALE = GL_RED_SCALE,
	RED_BIAS = GL_RED_BIAS,
	ZOOM_X = GL_ZOOM_X,
	ZOOM_Y = GL_ZOOM_Y,
	GREEN_SCALE = GL_GREEN_SCALE,
	GREEN_BIAS = GL_GREEN_BIAS,
	BLUE_SCALE = GL_BLUE_SCALE,
	BLUE_BIAS = GL_BLUE_BIAS,
	ALPHA_SCALE = GL_ALPHA_SCALE,
	ALPHA_BIAS = GL_ALPHA_BIAS,
	DEPTH_SCALE = GL_DEPTH_SCALE,
	DEPTH_BIAS = GL_DEPTH_BIAS,
	MAX_EVAL_ORDER = GL_MAX_EVAL_ORDER,
	MAX_LIGHTS = GL_MAX_LIGHTS,
	MAX_CLIP_PLANES = GL_MAX_CLIP_PLANES,
	MAX_TEXTURE_SIZE = GL_MAX_TEXTURE_SIZE,
	MAX_PIXEL_MAP_TABLE = GL_MAX_PIXEL_MAP_TABLE,
	MAX_ATTRIB_STACK_DEPTH = GL_MAX_ATTRIB_STACK_DEPTH,
	MAX_MODELVIEW_STACK_DEPTH = GL_MAX_MODELVIEW_STACK_DEPTH,
	MAX_NAME_STACK_DEPTH = GL_MAX_NAME_STACK_DEPTH,
	MAX_PROJECTION_STACK_DEPTH = GL_MAX_PROJECTION_STACK_DEPTH,
	MAX_TEXTURE_STACK_DEPTH = GL_MAX_TEXTURE_STACK_DEPTH,
	MAX_VIEWPORT_DIMS = GL_MAX_VIEWPORT_DIMS,
	MAX_CLIENT_ATTRIB_STACK_DEPTH = GL_MAX_CLIENT_ATTRIB_STACK_DEPTH,
	SUBPIXEL_BITS = GL_SUBPIXEL_BITS,
	INDEX_BITS = GL_INDEX_BITS,
	RED_BITS = GL_RED_BITS,
	GREEN_BITS = GL_GREEN_BITS,
	BLUE_BITS = GL_BLUE_BITS,
	ALPHA_BITS = GL_ALPHA_BITS,
	DEPTH_BITS = GL_DEPTH_BITS,
	STENCIL_BITS = GL_STENCIL_BITS,
	ACCUM_RED_BITS = GL_ACCUM_RED_BITS,
	ACCUM_GREEN_BITS = GL_ACCUM_GREEN_BITS,
	ACCUM_BLUE_BITS = GL_ACCUM_BLUE_BITS,
	ACCUM_ALPHA_BITS = GL_ACCUM_ALPHA_BITS,
	NAME_STACK_DEPTH = GL_NAME_STACK_DEPTH,
	AUTO_NORMAL = GL_AUTO_NORMAL,
	MAP1_COLOR_4 = GL_MAP1_COLOR_4,
	MAP1_INDEX = GL_MAP1_INDEX,
	MAP1_NORMAL = GL_MAP1_NORMAL,
	MAP1_TEXTURE_COORD_1 = GL_MAP1_TEXTURE_COORD_1,
	MAP1_TEXTURE_COORD_2 = GL_MAP1_TEXTURE_COORD_2,
	MAP1_TEXTURE_COORD_3 = GL_MAP1_TEXTURE_COORD_3,
	MAP1_TEXTURE_COORD_4 = GL_MAP1_TEXTURE_COORD_4,
	MAP1_VERTEX_3 = GL_MAP1_VERTEX_3,
	MAP1_VERTEX_4 = GL_MAP1_VERTEX_4,
	MAP2_COLOR_4 = GL_MAP2_COLOR_4,
	MAP2_INDEX = GL_MAP2_INDEX,
	MAP2_NORMAL = GL_MAP2_NORMAL,
	MAP2_TEXTURE_COORD_1 = GL_MAP2_TEXTURE_COORD_1,
	MAP2_TEXTURE_COORD_2 = GL_MAP2_TEXTURE_COORD_2,
	MAP2_TEXTURE_COORD_3 = GL_MAP2_TEXTURE_COORD_3,
	MAP2_TEXTURE_COORD_4 = GL_MAP2_TEXTURE_COORD_4,
	MAP2_VERTEX_3 = GL_MAP2_VERTEX_3,
	MAP2_VERTEX_4 = GL_MAP2_VERTEX_4,
	MAP1_GRID_DOMAIN = GL_MAP1_GRID_DOMAIN,
	MAP1_GRID_SEGMENTS = GL_MAP1_GRID_SEGMENTS,
	MAP2_GRID_DOMAIN = GL_MAP2_GRID_DOMAIN,
	MAP2_GRID_SEGMENTS = GL_MAP2_GRID_SEGMENTS,
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	FEEDBACK_BUFFER_POINTER = GL_FEEDBACK_BUFFER_POINTER,
	FEEDBACK_BUFFER_SIZE = GL_FEEDBACK_BUFFER_SIZE,
	FEEDBACK_BUFFER_TYPE = GL_FEEDBACK_BUFFER_TYPE,
	SELECTION_BUFFER_POINTER = GL_SELECTION_BUFFER_POINTER,
	SELECTION_BUFFER_SIZE = GL_SELECTION_BUFFER_SIZE,
	TEXTURE_BINDING_1D = GL_TEXTURE_BINDING_1D,
	TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D,
	VERTEX_ARRAY = GL_VERTEX_ARRAY,
	NORMAL_ARRAY = GL_NORMAL_ARRAY,
	COLOR_ARRAY = GL_COLOR_ARRAY,
	INDEX_ARRAY = GL_INDEX_ARRAY,
	TEXTURE_COORD_ARRAY = GL_TEXTURE_COORD_ARRAY,
	EDGE_FLAG_ARRAY = GL_EDGE_FLAG_ARRAY,
	VERTEX_ARRAY_SIZE = GL_VERTEX_ARRAY_SIZE,
	VERTEX_ARRAY_TYPE = GL_VERTEX_ARRAY_TYPE,
	VERTEX_ARRAY_STRIDE = GL_VERTEX_ARRAY_STRIDE,
	NORMAL_ARRAY_TYPE = GL_NORMAL_ARRAY_TYPE,
	NORMAL_ARRAY_STRIDE = GL_NORMAL_ARRAY_STRIDE,
	COLOR_ARRAY_SIZE = GL_COLOR_ARRAY_SIZE,
	COLOR_ARRAY_TYPE = GL_COLOR_ARRAY_TYPE,
	COLOR_ARRAY_STRIDE = GL_COLOR_ARRAY_STRIDE,
	INDEX_ARRAY_TYPE = GL_INDEX_ARRAY_TYPE,
	INDEX_ARRAY_STRIDE = GL_INDEX_ARRAY_STRIDE,
	TEXTURE_COORD_ARRAY_SIZE = GL_TEXTURE_COORD_ARRAY_SIZE,
	TEXTURE_COORD_ARRAY_TYPE = GL_TEXTURE_COORD_ARRAY_TYPE,
	TEXTURE_COORD_ARRAY_STRIDE = GL_TEXTURE_COORD_ARRAY_STRIDE,
	EDGE_FLAG_ARRAY_STRIDE = GL_EDGE_FLAG_ARRAY_STRIDE,
	POLYGON_OFFSET_FACTOR = GL_POLYGON_OFFSET_FACTOR,
	POLYGON_OFFSET_UNITS = GL_POLYGON_OFFSET_UNITS,
};

enum class GetTextureParameter
{
	TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
	TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
	TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S,
	TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T,
	TEXTURE_WIDTH = GL_TEXTURE_WIDTH,
	TEXTURE_HEIGHT = GL_TEXTURE_HEIGHT,
	TEXTURE_INTERNAL_FORMAT = GL_TEXTURE_INTERNAL_FORMAT,
	TEXTURE_BORDER_COLOR = GL_TEXTURE_BORDER_COLOR,
	TEXTURE_BORDER = GL_TEXTURE_BORDER, 
	TEXTURE_RED_SIZE = GL_TEXTURE_RED_SIZE,
	TEXTURE_GREEN_SIZE = GL_TEXTURE_GREEN_SIZE,
	TEXTURE_BLUE_SIZE = GL_TEXTURE_BLUE_SIZE,
	TEXTURE_ALPHA_SIZE = GL_TEXTURE_ALPHA_SIZE,
	TEXTURE_LUMINANCE_SIZE = GL_TEXTURE_LUMINANCE_SIZE,
	TEXTURE_INTENSITY_SIZE = GL_TEXTURE_INTENSITY_SIZE,
	TEXTURE_PRIORITY = GL_TEXTURE_PRIORITY,
	TEXTURE_RESIDENT = GL_TEXTURE_RESIDENT,
};

enum class HintMode
{
	DONT_CARE = GL_DONT_CARE,
	FASTEST = GL_FASTEST,
	NICEST = GL_NICEST,
};

enum class HintTarget
{
	PERSPECTIVE_CORRECTION_HINT = GL_PERSPECTIVE_CORRECTION_HINT,
	POINT_SMOOTH_HINT = GL_POINT_SMOOTH_HINT,
	LINE_SMOOTH_HINT = GL_LINE_SMOOTH_HINT,
	POLYGON_SMOOTH_HINT = GL_POLYGON_SMOOTH_HINT,
	FOG_HINT = GL_FOG_HINT,
};

enum class IndexPointerType
{
	SHORT = GL_SHORT,
	INT = GL_INT,
	FLOAT = GL_FLOAT,
	DOUBLE = GL_DOUBLE,
};

enum class LightModelParameter
{
	LIGHT_MODEL_AMBIENT = GL_LIGHT_MODEL_AMBIENT,
	LIGHT_MODEL_LOCAL_VIEWER = GL_LIGHT_MODEL_LOCAL_VIEWER,
	LIGHT_MODEL_TWO_SIDE = GL_LIGHT_MODEL_TWO_SIDE,
};

enum class LightName
{
	LIGHT0 = GL_LIGHT0,
	LIGHT1 = GL_LIGHT1,
	LIGHT2 = GL_LIGHT2,
	LIGHT3 = GL_LIGHT3,
	LIGHT4 = GL_LIGHT4,
	LIGHT5 = GL_LIGHT5,
	LIGHT6 = GL_LIGHT6,
	LIGHT7 = GL_LIGHT7,
};

enum class LightModel
{
	LIGHT_MODEL_LOCAL_VIEWER = GL_LIGHT_MODEL_LOCAL_VIEWER,
	LIGHT_MODEL_COLOR_CONTROL = GL_LIGHT_MODEL_COLOR_CONTROL,
	LIGHT_MODEL_TWO_SIDE = GL_LIGHT_MODEL_COLOR_CONTROL
};

enum class LightParameter
{
	AMBIENT = GL_AMBIENT,
	DIFFUSE = GL_DIFFUSE,
	SPECULAR = GL_SPECULAR,
	POSITION = GL_POSITION,
	SPOT_DIRECTION = GL_SPOT_DIRECTION,
	SPOT_EXPONENT = GL_SPOT_EXPONENT,
	SPOT_CUTOFF = GL_SPOT_CUTOFF,
	CONSTANT_ATTENUATION = GL_CONSTANT_ATTENUATION,
	LINEAR_ATTENUATION = GL_LINEAR_ATTENUATION,
	QUADRATIC_ATTENUATION = GL_QUADRATIC_ATTENUATION,
};	

enum class InterleavedArraysMode
{
	V2F = GL_V2F,
	V3F = GL_V3F,
	C4UB_V2F = GL_C4UB_V2F,
	C4UB_V3F = GL_C4UB_V3F,
	C3F_V3F = GL_C3F_V3F,
	N3F_V3F = GL_N3F_V3F,
	C4F_N3F_V3F = GL_C4F_N3F_V3F,
	T2F_V3F = GL_T2F_V3F,
	T4F_V4F = GL_T4F_V4F,
	T2F_C4UB_V3F = GL_T2F_C4UB_V3F,
	T2F_C3F_V3F = GL_T2F_C3F_V3F,
	T2F_N3F_V3F = GL_T2F_N3F_V3F,
	T2F_C4F_N3F_V3F = GL_T2F_C4F_N3F_V3F,
	T4F_C4F_N3F_V4F = GL_T4F_C4F_N3F_V4F,
};

enum class InterleavedArrays
{
	COMPILE = GL_COMPILE,
	COMPILE_AND_EXECUTE = GL_COMPILE_AND_EXECUTE,
};

enum class ListNameType
{
	BYTE = GL_BYTE,
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	SHORT = GL_SHORT,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	INT = GL_INT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
	FLOAT = GL_FLOAT,
	BYTES2 = GL_2_BYTES,
	BYTES3 = GL_3_BYTES,
	BYTES4 = GL_4_BYTES,
};

enum class LogicOp
{
	CLEAR = GL_CLEAR,
	AND = GL_AND,
	AND_REVERSE = GL_AND_REVERSE,
	COPY = GL_COPY,
	AND_INVERTED = GL_AND_INVERTED,
	NOOP = GL_NOOP, 
	XOR = GL_XOR,
	OR = GL_OR,
	NOR = GL_NOR,
	EQUIV = GL_EQUIV,
	INVERT = GL_INVERT,
	OR_REVERSE = GL_OR_REVERSE,
	COPY_INVERTED = GL_COPY_INVERTED,
	OR_INVERTED = GL_OR_INVERTED,
	NAND = GL_NAND,
	SET = GL_SET,
};

enum class MapTarget
{
	MAP1_COLOR_4 = GL_MAP2_VERTEX_4,
	MAP1_INDEX = GL_MAP2_VERTEX_4,
	MAP1_NORMAL = GL_MAP2_VERTEX_4,
	MAP1_TEXTURE_COORD_1 = GL_MAP2_VERTEX_4,
	MAP1_TEXTURE_COORD_2 = GL_MAP2_VERTEX_4,
	MAP1_TEXTURE_COORD_3 = GL_MAP2_VERTEX_4,
	MAP1_TEXTURE_COORD_4 = GL_MAP2_VERTEX_4,
	MAP1_VERTEX_3 = GL_MAP2_VERTEX_4,
	MAP1_VERTEX_4 = GL_MAP2_VERTEX_4,
	MAP2_COLOR_4 = GL_MAP2_VERTEX_4,
	MAP2_INDEX = GL_MAP2_VERTEX_4,
	MAP2_NORMAL = GL_MAP2_VERTEX_4,
	MAP2_TEXTURE_COORD_1 = GL_MAP2_VERTEX_4,
	MAP2_TEXTURE_COORD_2 = GL_MAP2_VERTEX_4,
	MAP2_TEXTURE_COORD_3 = GL_MAP2_VERTEX_4,
	MAP2_TEXTURE_COORD_4 = GL_MAP2_VERTEX_4,
	MAP2_VERTEX_3 = GL_MAP2_VERTEX_4,
	MAP2_VERTEX_4 = GL_MAP2_VERTEX_4,
};

enum class FaceType
{
	FRONT = GL_FRONT,
	BACK = GL_BACK,
	FRONT_AND_BACK = GL_FRONT_AND_BACK,
};

enum class GetMaterialFace
{
	FRONT = GL_FRONT,
	BACK = GL_BACK,
};

enum class MaterialParameter
{
	EMISSION = GL_EMISSION,
	SHININESS = GL_SHININESS,
	AMBIENT_AND_DIFFUSE = GL_AMBIENT_AND_DIFFUSE,
	COLOR_INDEXES = GL_COLOR_INDEXES,
	AMBIENT = GL_AMBIENT,
	DIFFUSE = GL_DIFFUSE,
	SPECULAR = GL_SPECULAR,
};

/**	
*	矩阵处理类型
*/
enum class MatrixMode
{
	MODELVIEW = GL_MODELVIEW,
	PROJECTION = GL_PROJECTION,
	TEXTURE = GL_TEXTURE,
};

enum class MeshMode
{
	POINT = GL_POINT,
	LINE = GL_LINE,
};

enum class MeshMode2
{
	POINT = GL_POINT,
	LINE = GL_LINE,
	FILL = GL_FILL,
};

enum class NormalPointerType
{
	BYTE = GL_BYTE,
	SHORT = GL_SHORT,
	INT = GL_INT,
	FLOAT = GL_FLOAT,
	DOUBLE = GL_DOUBLE,
};

enum class PixelCopyType
{
	COLOR = GL_COLOR,
	DEPTH = GL_DEPTH,
	STENCIL = GL_STENCIL,
};

// 像素格式
enum class TexImageDataFormat
{
	RED = GL_RED,
	RG = GL_RG,
	RGB = GL_RGB,
	BGR = GL_BGR,
	RGBA = GL_RGBA,
	BGRA = GL_BGRA,
	RED_INTEGER = GL_RED_INTEGER,
	RG_INTEGER = GL_RG_INTEGER,
	RGB_INTEGER = GL_RGB_INTEGER,
	BGR_INTEGER = GL_BGR_INTEGER,
	RGBA_INTEGER = GL_RGBA_INTEGER,
	BGRA_INTEGER = GL_BGRA_INTEGER,
	STENCIL_INDEX = GL_STENCIL_INDEX,
	DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	DEPTH_STENCIL = GL_DEPTH_STENCIL
};


enum class PixelMap
{
	PIXEL_MAP_I_TO_I = GL_PIXEL_MAP_I_TO_I,
	PIXEL_MAP_S_TO_S = GL_PIXEL_MAP_S_TO_S,
	PIXEL_MAP_I_TO_R = GL_PIXEL_MAP_I_TO_R,
	PIXEL_MAP_I_TO_G = GL_PIXEL_MAP_I_TO_G,
	PIXEL_MAP_I_TO_B = GL_PIXEL_MAP_I_TO_B,
	PIXEL_MAP_I_TO_A = GL_PIXEL_MAP_I_TO_A,
	PIXEL_MAP_R_TO_R = GL_PIXEL_MAP_R_TO_R,
	PIXEL_MAP_G_TO_G = GL_PIXEL_MAP_G_TO_G,
	PIXEL_MAP_B_TO_B = GL_PIXEL_MAP_B_TO_B,
	PIXEL_MAP_A_TO_A = GL_PIXEL_MAP_A_TO_A,
};

enum class PixelStore
{
	UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES,
	UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST,
	UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH,
	UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS,
	UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS,
	UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT,

	PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES,
	PACK_LSB_FIRST = GL_PACK_LSB_FIRST,
	PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH,
	PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS,
	PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS,
	PACK_ALIGNMENT = GL_PACK_ALIGNMENT,
};

enum class PixelTransfer
{
	MAP_COLOR = GL_MAP_COLOR,
	MAP_STENCIL = GL_MAP_STENCIL,
	INDEX_SHIFT = GL_INDEX_SHIFT,
	INDEX_OFFSET = GL_INDEX_OFFSET,
	RED_SCALE = GL_RED_SCALE,
	RED_BIAS = GL_RED_BIAS,
	GREEN_SCALE = GL_GREEN_SCALE,
	GREEN_BIAS = GL_GREEN_BIAS,
	BLUE_SCALE = GL_BLUE_SCALE,
	BLUE_BIAS = GL_BLUE_BIAS,
	ALPHA_SCALE = GL_ALPHA_SCALE,
	ALPHA_BIAS = GL_ALPHA_BIAS,
	DEPTH_SCALE = GL_DEPTH_SCALE,
	DEPTH_BIAS = GL_DEPTH_BIAS,
};

enum class TexImageDataType
{
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	BYTE = GL_BYTE,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	SHORT = GL_SHORT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
	INT = GL_INT,
	FLOAT = GL_FLOAT,
	UNSIGNED_BYTE_3_3_2 = GL_UNSIGNED_BYTE_3_3_2,
	UNSIGNED_BYTE_2_3_3_REV = GL_UNSIGNED_BYTE_2_3_3_REV,
	UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5,
	UNSIGNED_SHORT_5_6_5_REV = GL_UNSIGNED_SHORT_5_6_5_REV,
	UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4,
	UNSIGNED_SHORT_4_4_4_4_REV = GL_UNSIGNED_SHORT_4_4_4_4_REV,
	UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1,
	UNSIGNED_SHORT_1_5_5_5_REV = GL_UNSIGNED_SHORT_1_5_5_5_REV,
	UNSIGNED_INT_8_8_8_8 = GL_UNSIGNED_INT_8_8_8_8,
	UNSIGNED_INT_8_8_8_8_REV = GL_UNSIGNED_INT_8_8_8_8_REV,
	UNSIGNED_INT_10_10_10_2 = GL_UNSIGNED_INT_10_10_10_2,
	UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV
};

enum class PolygonMode
{
	POINT = GL_POINT,
	LINE = GL_LINE,
	FILL = GL_FILL,
};

enum class ReadBufferMode
{
	FRONT_LEFT = GL_FRONT_LEFT,
	FRONT_RIGHT = GL_FRONT_RIGHT,
	BACK_LEFT = GL_BACK_LEFT,
	BACK_RIGHT = GL_BACK_RIGHT,
	FRONT = GL_FRONT,
	BACK = GL_BACK,
	LEFT = GL_LEFT,
	RIGHT = GL_RIGHT,
	AUX0 = GL_AUX0,
	AUX1 = GL_AUX1,
	AUX2 = GL_AUX2,
	AUX3 = GL_AUX3,
};

enum class RenderingMode
{
	RENDER = GL_RENDER,
	FEEDBACK = GL_FEEDBACK,
	SELECT = GL_SELECT,
};

enum class ShadingModel
{
	FLAT = GL_FLAT,
	SMOOTH = GL_SMOOTH,
};

enum class StencilFunction
{
	NEVER = GL_NEVER,
	LESS = GL_LESS,
	EQUAL = GL_EQUAL,
	LEQUAL = GL_LEQUAL,
	GREATER = GL_GREATER,
	NOTEQUAL = GL_NOTEQUAL,
	GEQUAL = GL_GEQUAL,
	ALWAYS = GL_ALWAYS,
};

enum class StencilOp
{
	ZERO = GL_ZERO,
	KEEP = GL_KEEP,
	REPLACE = GL_REPLACE,
	INCR = GL_INCR,
	DECR = GL_DECR,
	INVERT = GL_INVERT,
};

enum class StringName
{
	VENDOR = GL_VENDOR,
	RENDERER = GL_RENDERER,
	VERSION = GL_VERSION,
	SHADING_LANGUAGE_VERSION = GL_SHADING_LANGUAGE_VERSION,
	EXTENSIONS = GL_EXTENSIONS,
};

enum class TextureCoordName
{
	S = GL_S,
	T = GL_T,
	R = GL_R,
	Q = GL_Q,
};

enum class TexCoordPointerType
{
	SHORT = GL_SHORT,
	INT = GL_INT,
	FLOAT = GL_FLOAT,
	DOUBLE = GL_DOUBLE,
};

enum class TextureEnvMode
{
	MODULATE = GL_MODULATE,
	DECAL = GL_DECAL,
	BLEND = GL_BLEND,
	REPLACE = GL_REPLACE,
};

enum class TextureEnvParameter
{
	TEXTURE_ENV_MODE = GL_TEXTURE_ENV_MODE,
	TEXTURE_ENV_COLOR = GL_TEXTURE_ENV_COLOR,
};

enum class TextureEnvTarget
{
	TEXTURE_ENV = GL_TEXTURE_ENV,
};

enum class TextureGenMode
{
	EYE_LINEAR = GL_EYE_LINEAR,
	OBJECT_LINEAR = GL_OBJECT_LINEAR,
	SPHERE_MAP = GL_SPHERE_MAP,
};

enum class TextureGenParameter
{
	TEXTURE_GEN_MODE = GL_TEXTURE_GEN_MODE,
	OBJECT_PLANE = GL_OBJECT_PLANE,
	EYE_PLANE = GL_EYE_PLANE,
};

enum class TextureMagFilter
{
	NEAREST = GL_NEAREST,
	LINEAR = GL_LINEAR,
};

enum class TextureMinFilter
{
	NEAREST = GL_NEAREST,
	LINEAR = GL_LINEAR,

	NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
	LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
	NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
	LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR,
};

enum class TextureParameterName
{
	DEPTH_STENCIL_TEXTURE_MODE = GL_DEPTH_STENCIL_TEXTURE_MODE,
	TEXTURE_BASE_LEVEL = GL_TEXTURE_BASE_LEVEL,
	TEXTURE_COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC,
	TEXTURE_COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
	TEXTURE_LOD_BIAS = GL_TEXTURE_LOD_BIAS,
	TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
	TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
	TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD,
	TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD,
	TEXTURE_MAX_LEVEL = GL_TEXTURE_MAX_LEVEL,
	TEXTURE_SWIZZLE_R = GL_TEXTURE_SWIZZLE_R,
	TEXTURE_SWIZZLE_G = GL_TEXTURE_SWIZZLE_G,
	TEXTURE_SWIZZLE_B = GL_TEXTURE_SWIZZLE_B,
	TEXTURE_SWIZZLE_A = GL_TEXTURE_SWIZZLE_A,
	TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S,
	TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T,
	TEXTURE_WRAP_R = GL_TEXTURE_WRAP_R
};

enum class TextureTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
	TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY
};

enum class ColorTableTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
	PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
};

enum class TextureWrapMode
{
	CLAMP = GL_CLAMP,
	REPEAT = GL_REPEAT,
};

enum class VertexPointerType
{
	SHORT = GL_SHORT,
	INT = GL_INT,
	FLOAT = GL_FLOAT,
	DOUBLE = GL_DOUBLE,
};

enum class ClientAttribMask : uint32_t
{
	CLIENT_PIXEL_STORE_BIT = GL_CLIENT_PIXEL_STORE_BIT,
	CLIENT_VERTEX_ARRAY_BIT = GL_CLIENT_VERTEX_ARRAY_BIT,
	CLIENT_ALL_ATTRIB_BITS = GL_CLIENT_ALL_ATTRIB_BITS,
};

enum class PolygonOffset
{
	POLYGON_OFFSET_FACTOR = GL_POLYGON_OFFSET_FACTOR,
	POLYGON_OFFSET_UNITS = GL_POLYGON_OFFSET_UNITS,
	POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT,
	POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE,
	POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
};

enum class TexImageInternalFormat
{
	DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	DEPTH_STENCIL = GL_DEPTH_STENCIL,
	RED = GL_RED,
	RG = GL_RG,
	RGB = GL_RGB,
	RGBA = GL_RGBA,

	R8 = GL_R8,
	R8_SNORM = GL_R8_SNORM,
	R16 = GL_R16,
	R16_SNORM = GL_R16_SNORM,
	RG8 = GL_RG8,
	RG8_SNORM = GL_RG8_SNORM,
	RG16 = GL_RG16,
	RG16_SNORM = GL_RG16_SNORM,
	R3_G3_B2 = GL_R3_G3_B2,
	RGB4 = GL_RGB4,
	RGB5 = GL_RGB5,
	RGB8 = GL_RGB8,
	RGB8_SNORM = GL_RGB8_SNORM,
	RGB10 = GL_RGB10,
	RGB12 = GL_RGB12,
	RGB16_SNORM = GL_RGB16_SNORM,
	RGBA2 = GL_RGBA2,
	RGBA4 = GL_RGBA4,
	RGB5_A1 = GL_RGB5_A1,
	RGBA8 = GL_RGBA8,
	RGBA8_SNORM = GL_RGBA8_SNORM,
	RGB10_A2 = GL_RGB10_A2,
	RGB10_A2UI = GL_RGB10_A2UI,
	RGBA12 = GL_RGBA12,
	RGBA16 = GL_RGBA16,
	SRGB8 = GL_SRGB8,
	SRGB8_ALPHA8 = GL_SRGB8_ALPHA8,
	R16F = GL_R16F,
	RG16F = GL_RG16F,
	RGB16F = GL_RGB16F,
	RGBA16F = GL_RGBA16F,
	R32F = GL_R32F,
	RG32F = GL_RG32F,
	RGB32F = GL_RGB32F,
	RGBA32F = GL_RGBA32F,
	R11F_G11F_B10F = GL_R11F_G11F_B10F,
	RGB9_E5 = GL_RGB9_E5,
	R8I = GL_R8I,
	R8UI = GL_R8UI,
	R16I = GL_R16I,
	R16UI = GL_R16UI,
	R32I = GL_R32I,
	R32UI = GL_R32UI,
	RG8I = GL_RG8I,
	RG8UI = GL_RG8UI,
	RG16I = GL_RG16I,
	RG16UI = GL_RG16UI,
	RG32I = GL_RG32I,
	RG32UI = GL_RG32UI,
	RGB8I = GL_RGB8I,
	RGB8UI = GL_RGB8UI,
	RGB16I = GL_RGB16I,
	RGB16UI = GL_RGB16UI,
	RGB32I = GL_RGB32I,
	RGB32UI = GL_RGB32UI,
	RGBA8I = GL_RGBA8I,
	RGBA8UI = GL_RGBA8UI,
	RGBA16I = GL_RGBA16I,
	RGBA16UI = GL_RGBA16UI,
	RGBA32I = GL_RGBA32I,
	RGBA32UI = GL_RGBA32UI,

	COMPRESSED_RED = GL_COMPRESSED_RED,
	COMPRESSED_RG = GL_COMPRESSED_RG,
	COMPRESSED_RGB = GL_COMPRESSED_RGB,
	COMPRESSED_RGBA = GL_COMPRESSED_RGBA,
	COMPRESSED_SRGB = GL_COMPRESSED_SRGB,
	COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA,
	COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
	COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
	COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
	COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
	COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,
};


enum class TextureObject
{
	TEXTURE_PRIORITY = GL_TEXTURE_PRIORITY,
	TEXTURE_RESIDENT = GL_TEXTURE_RESIDENT,
	TEXTURE_BINDING_1D = GL_TEXTURE_BINDING_1D,
	TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D,
};

enum class VertexArrayParameter
{
	VERTEX_ARRAY = GL_VERTEX_ARRAY,
	NORMAL_ARRAY = GL_NORMAL_ARRAY,
	COLOR_ARRAY = GL_COLOR_ARRAY,
	INDEX_ARRAY = GL_INDEX_ARRAY,
	TEXTURE_COORD_ARRAY = GL_TEXTURE_COORD_ARRAY,
	EDGE_FLAG_ARRAY = GL_EDGE_FLAG_ARRAY,
	VERTEX_ARRAY_SIZE = GL_VERTEX_ARRAY_SIZE,
	VERTEX_ARRAY_TYPE = GL_VERTEX_ARRAY_TYPE,
	VERTEX_ARRAY_STRIDE = GL_VERTEX_ARRAY_STRIDE,
	NORMAL_ARRAY_TYPE = GL_NORMAL_ARRAY_TYPE,
	NORMAL_ARRAY_STRIDE = GL_NORMAL_ARRAY_STRIDE,
	COLOR_ARRAY_SIZE = GL_COLOR_ARRAY_SIZE,
	COLOR_ARRAY_TYPE = GL_COLOR_ARRAY_TYPE,
	COLOR_ARRAY_STRIDE = GL_COLOR_ARRAY_STRIDE,
	INDEX_ARRAY_TYPE = GL_INDEX_ARRAY_TYPE,
	INDEX_ARRAY_STRIDE = GL_INDEX_ARRAY_STRIDE,
	TEXTURE_COORD_ARRAY_SIZE = GL_TEXTURE_COORD_ARRAY_SIZE,
	TEXTURE_COORD_ARRAY_TYPE = GL_TEXTURE_COORD_ARRAY_TYPE,
	TEXTURE_COORD_ARRAY_STRIDE = GL_TEXTURE_COORD_ARRAY_STRIDE,
	EDGE_FLAG_ARRAY_STRIDE = GL_EDGE_FLAG_ARRAY_STRIDE,
	VERTEX_ARRAY_POINTER = GL_VERTEX_ARRAY_POINTER,
	NORMAL_ARRAY_POINTER = GL_NORMAL_ARRAY_POINTER,
	COLOR_ARRAY_POINTER = GL_COLOR_ARRAY_POINTER,
	INDEX_ARRAY_POINTER = GL_INDEX_ARRAY_POINTER,
	TEXTURE_COORD_ARRAY_POINTER = GL_TEXTURE_COORD_ARRAY_POINTER,
	EDGE_FLAG_ARRAY_POINTER = GL_EDGE_FLAG_ARRAY_POINTER,
	V2F = GL_V2F,
	V3F = GL_V3F,
	C4UB_V2F = GL_C4UB_V2F,
	C4UB_V3F = GL_C4UB_V3F,
	C3F_V3F = GL_C3F_V3F,
	N3F_V3F = GL_N3F_V3F,
	C4F_N3F_V3F = GL_C4F_N3F_V3F,
	T2F_V3F = GL_T2F_V3F,
	T4F_V4F = GL_T4F_V4F,
	T2F_C4UB_V3F = GL_T2F_C4UB_V3F,
	T2F_C3F_V3F = GL_T2F_C3F_V3F,
	T2F_N3F_V3F = GL_T2F_N3F_V3F,
	T2F_C4F_N3F_V3F = GL_T2F_C4F_N3F_V3F,
	T4F_C4F_N3F_V4F = GL_T4F_C4F_N3F_V4F,
};

enum class MapTarget1
{
	MAP1_VERTEX_3 = GL_MAP1_VERTEX_3,
	MAP1_VERTEX_4 = GL_MAP1_VERTEX_4,
	MAP1_COLOR_4 = GL_MAP1_COLOR_4,
	MAP1_INDEX = GL_MAP1_INDEX,
	MAP1_NORMAL = GL_MAP1_NORMAL,
	MAP1_TEXTURE_COORD_1 = GL_MAP1_TEXTURE_COORD_1,
	MAP1_TEXTURE_COORD_2 = GL_MAP1_TEXTURE_COORD_2,
	MAP1_TEXTURE_COORD_3 = GL_MAP1_TEXTURE_COORD_3,
	MAP1_TEXTURE_COORD_4 = GL_MAP1_TEXTURE_COORD_4,
};

enum class MapTarget2
{
	MAP1_VERTEX_3 = GL_MAP1_VERTEX_3,
	MAP1_VERTEX_4 = GL_MAP1_VERTEX_4,
	MAP1_COLOR_4 = GL_MAP1_COLOR_4,
	MAP1_INDEX = GL_MAP1_INDEX,
	MAP1_NORMAL = GL_MAP1_NORMAL,
	MAP1_TEXTURE_COORD_1 = GL_MAP1_TEXTURE_COORD_1,
	MAP1_TEXTURE_COORD_2 = GL_MAP1_TEXTURE_COORD_2,
	MAP1_TEXTURE_COORD_3 = GL_MAP1_TEXTURE_COORD_3,
	MAP1_TEXTURE_COORD_4 = GL_MAP1_TEXTURE_COORD_4,
};

enum class IndexDataType
{
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
};

enum class ShaderType
{
	VERTEX_SHADER = GL_VERTEX_SHADER,
	TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER,
	TESS_EVALUATION_SHADER = GL_TESS_EVALUATION_SHADER,
	GEOMETRY_SHADER = GL_GEOMETRY_SHADER,
	FRAGMENT_SHADER = GL_FRAGMENT_SHADER,
	COMPUTE_SHADER = GL_COMPUTE_SHADER,
};

enum class ActiveTextureName
{
	TEXTURE0 = GL_TEXTURE0,
	TEXTURE1 = GL_TEXTURE1,
	TEXTURE2 = GL_TEXTURE2,
	TEXTURE3 = GL_TEXTURE3,
	TEXTURE4 = GL_TEXTURE4,
	TEXTURE5 = GL_TEXTURE5,
	TEXTURE6 = GL_TEXTURE6,
	TEXTURE7 = GL_TEXTURE7,
	TEXTURE8 = GL_TEXTURE8,
	TEXTURE9 = GL_TEXTURE9,
	TEXTURE10 = GL_TEXTURE10,
	TEXTURE11 = GL_TEXTURE11,
	TEXTURE12 = GL_TEXTURE12,
	TEXTURE13 = GL_TEXTURE13,
	TEXTURE14 = GL_TEXTURE14,
	TEXTURE15 = GL_TEXTURE15,
	TEXTURE16 = GL_TEXTURE16,
	TEXTURE17 = GL_TEXTURE17,
	TEXTURE18 = GL_TEXTURE18,
	TEXTURE19 = GL_TEXTURE19,
	TEXTURE20 = GL_TEXTURE20,
	TEXTURE21 = GL_TEXTURE21,
	TEXTURE22 = GL_TEXTURE22,
	TEXTURE23 = GL_TEXTURE23,
	TEXTURE24 = GL_TEXTURE24,
	TEXTURE25 = GL_TEXTURE25,
	TEXTURE26 = GL_TEXTURE26,
	TEXTURE27 = GL_TEXTURE27,
	TEXTURE28 = GL_TEXTURE28,
	TEXTURE29 = GL_TEXTURE29,
	TEXTURE30 = GL_TEXTURE30,
	TEXTURE31 = GL_TEXTURE31,
};

enum class QueryTarget
{
	SAMPLES_PASSED = GL_SAMPLES_PASSED,
	ANY_SAMPLES_PASSED = GL_ANY_SAMPLES_PASSED,
	PRIMITIVES_GENERATED = GL_PRIMITIVES_GENERATED,
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
	TIME_ELAPSED = GL_TIME_ELAPSED,
};

enum class QueryMode
{
	QUERY_WAIT = GL_QUERY_WAIT,
	QUERY_NO_WAIT = GL_QUERY_NO_WAIT,
	QUERY_BY_REGION_WAIT = GL_QUERY_BY_REGION_WAIT,
	QUERY_BY_REGION_NO_WAIT = GL_QUERY_BY_REGION_NO_WAIT,
};

enum class QueryParameter
{
	QUERY_RESULT = GL_QUERY_RESULT,
	QUERY_RESULT_AVAILABLE = GL_QUERY_RESULT_AVAILABLE,
};

enum class ProgramPipelineParameter
{
	ACTIVE_PROGRAM = GL_ACTIVE_PROGRAM,
	VERTEX_SHADER = GL_VERTEX_SHADER,
	TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER,
	TESS_EVALUATION_SHADER = GL_TESS_EVALUATION_SHADER,
	GEOMETRY_SHADER = GL_GEOMETRY_SHADER,
	FRAGMENT_SHADER = GL_FRAGMENT_SHADER,
	INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
};

enum class SamplerParameter
{
	TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
	TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
	TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD,
	TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD,
	TEXTURE_LOD_BIAS = GL_TEXTURE_LOD_BIAS,
	TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S,
	TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T,
	TEXTURE_WRAP_R = GL_TEXTURE_WRAP_R,
	TEXTURE_BORDER_COLOR = GL_TEXTURE_BORDER_COLOR,
	TEXTURE_COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
	TEXTURE_COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC
};

enum class SyncParameter
{
	OBJECT_TYPE = GL_OBJECT_TYPE,
	SYNC_STATUS = GL_SYNC_STATUS,
	SYNC_CONDITION = GL_SYNC_CONDITION,
	SYNC_FLAGS = GL_SYNC_FLAGS,
};

enum class GraphicsResetStatus
{
	NONE = GL_NO_ERROR,
	GUILTY_CONTEXT_RESET = GL_GUILTY_CONTEXT_RESET,
	INNOCENT_CONTEXT_RESET = GL_INNOCENT_CONTEXT_RESET,
	UNKNOWN_CONTEXT_RESET = GL_UNKNOWN_CONTEXT_RESET,
};


enum class MemoryBarrierBit
{
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT = GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT,
	ELEMENT_ARRAY_BARRIER_BIT = GL_ELEMENT_ARRAY_BARRIER_BIT,
	UNIFORM_BARRIER_BIT = GL_UNIFORM_BARRIER_BIT,
	TEXTURE_FETCH_BARRIER_BIT = GL_TEXTURE_FETCH_BARRIER_BIT,
	SHADER_IMAGE_ACCESS_BARRIER_BIT = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT,
	COMMAND_BARRIER_BIT = GL_COMMAND_BARRIER_BIT,
	PIXEL_BUFFER_BARRIER_BIT = GL_PIXEL_BUFFER_BARRIER_BIT,
	TEXTURE_UPDATE_BARRIER_BIT = GL_TEXTURE_UPDATE_BARRIER_BIT,
	BUFFER_UPDATE_BARRIER_BIT = GL_BUFFER_UPDATE_BARRIER_BIT,
	FRAMEBUFFER_BARRIER_BIT = GL_FRAMEBUFFER_BARRIER_BIT,
	TRANSFORM_FEEDBACK_BARRIER_BIT = GL_TRANSFORM_FEEDBACK_BARRIER_BIT,
	ATOMIC_COUNTER_BARRIER_BIT = GL_ATOMIC_COUNTER_BARRIER_BIT,
	SHADER_STORAGE_BARRIER_BIT = GL_SHADER_STORAGE_BARRIER_BIT
};

enum class MemoryBarrierRegionBit
{
	ATOMIC_COUNTER_BARRIER_BIT = GL_ATOMIC_COUNTER_BARRIER_BIT,
	FRAMEBUFFER_BARRIER_BIT = GL_FRAMEBUFFER_BARRIER_BIT,
	SHADER_IMAGE_ACCESS_BARRIER_BIT = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT,
	SHADER_STORAGE_BARRIER_BIT = GL_SHADER_STORAGE_BARRIER_BIT,
	TEXTURE_FETCH_BARRIER_BIT = GL_TEXTURE_FETCH_BARRIER_BIT,
	UNIFORM_BARRIER_BIT = GL_UNIFORM_BARRIER_BIT,
};

enum class TransformFeedbackPrimitiveMode
{
	POINTS = GL_POINTS,
	LINES = GL_LINES,
	TRIANGLES = GL_TRIANGLES,
};

enum class DrawTransformFeedbackMode
{
	POINTS = GL_POINTS,
	LINE_STRIP = GL_LINE_STRIP,
	LINE_LOOP = GL_LINE_LOOP,
	LINES = GL_LINES,
	LINE_STRIP_ADJACENCY = GL_LINE_STRIP_ADJACENCY,
	LINES_ADJACENCY = GL_LINES_ADJACENCY,
	TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
	TRIANGLE_FAN = GL_TRIANGLE_FAN,
	TRIANGLES = GL_TRIANGLES,
	TRIANGLE_STRIP_ADJACENCY = GL_TRIANGLE_STRIP_ADJACENCY,
	TRIANGLES_ADJACENCY = GL_TRIANGLES_ADJACENCY,
	PATCHES = GL_PATCHES
};

enum class GetTransformFeedbackParameter
{
	TRANSFORM_FEEDBACK_BUFFER_BINDING = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
	TRANSFORM_FEEDBACK_BUFFER_START = GL_TRANSFORM_FEEDBACK_BUFFER_START,
	TRANSFORM_FEEDBACK_BUFFER_SIZE = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
	TRANSFORM_FEEDBACK_PAUSED = GL_TRANSFORM_FEEDBACK_PAUSED,
	TRANSFORM_FEEDBACK_ACTIVE = GL_TRANSFORM_FEEDBACK_ACTIVE
};

enum class TransformFeedbackBufferMode
{
	INTERLEAVED_ATTRIBS = GL_INTERLEAVED_ATTRIBS,
	SEPARATE_ATTRIBS = GL_SEPARATE_ATTRIBS
};

enum class BlendEquationMode
{
	FUNC_ADD = GL_FUNC_ADD,
	FUNC_SUBTRACT = GL_FUNC_SUBTRACT,
	FUNC_REVERSE_SUBTRACT = GL_FUNC_REVERSE_SUBTRACT,
	MIN = GL_MIN,
	MAX = GL_MAX
};

enum class ClipControlOrigin
{
	LOWER_LEFT = GL_LOWER_LEFT,
	UPPER_LEFT = GL_UPPER_LEFT,
};

enum class ClipControlDepth
{
	NEGATIVE_ONE_TO_ONE = GL_NEGATIVE_ONE_TO_ONE,
	ZERO_TO_ONE = GL_ZERO_TO_ONE,
};

enum class PointParameter
{
	POINT_FADE_THRESHOLD_SIZE = GL_POINT_FADE_THRESHOLD_SIZE,
	POINT_SPRITE_COORD_ORIGIN = GL_POINT_SPRITE_COORD_ORIGIN,
};

enum class BufferTarget
{
	ARRAY_BUFFER = GL_ARRAY_BUFFER,
	ATOMIC_COUNTER_BUFFER = GL_ATOMIC_COUNTER_BUFFER,
	COPY_READ_BUFFER = GL_COPY_READ_BUFFER,
	COPY_WRITE_BUFFER = GL_COPY_WRITE_BUFFER,
	DISPATCH_INDIRECT_BUFFER = GL_DISPATCH_INDIRECT_BUFFER,
	DRAW_INDIRECT_BUFFER = GL_DRAW_INDIRECT_BUFFER,
	ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
	PIXEL_PACK_BUFFER = GL_PIXEL_PACK_BUFFER,
	PIXEL_UNPACK_BUFFER = GL_PIXEL_UNPACK_BUFFER,
	QUERY_BUFFER = GL_QUERY_BUFFER,
	SHADER_STORAGE_BUFFER = GL_SHADER_STORAGE_BUFFER,
	TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
	TRANSFORM_FEEDBACK_BUFFER = GL_TRANSFORM_FEEDBACK_BUFFER,
	UNIFORM_BUFFER = GL_UNIFORM_BUFFER
};

enum class AccessType
{
	READ_ONLY = GL_READ_ONLY,
	WRITE_ONLY = GL_WRITE_ONLY,
	READ_WRITE = GL_READ_WRITE,
};

enum class InternalImageFormat
{
	RGBA32F = GL_RGBA32F,
	RGBA16F = GL_RGBA16F,
	RG32F = GL_RG32F,
	RG16F = GL_RG16F,
	R11F_G11F_B10F = GL_R11F_G11F_B10F,
	R32F = GL_R32F,
	R16F = GL_R16F,
	RGBA32UI = GL_RGBA32UI,
	RGBA16UI = GL_RGBA16UI,
	RGB10_A2UI = GL_RGB10_A2UI,
	RGBA8UI = GL_RGBA8UI,
	RG32UI = GL_RG32UI,
	RG16UI = GL_RG16UI,
	RG8UI = GL_RG8UI,
	R32UI = GL_R32UI,
	R16UI = GL_R16UI,
	R8UI = GL_R8UI,
	RGBA32I = GL_RGBA32I,
	RGBA16I = GL_RGBA16I,
	RGBA8I = GL_RGBA8I,
	RG32I = GL_RG32I,
	RG16I = GL_RG16I,
	RG8I = GL_RG8I,
	R32I = GL_R32I,
	R16I = GL_R16I,
	R8I = GL_R8I,
	RGBA16 = GL_RGBA16,
	RGB10_A2 = GL_RGB10_A2,
	RGBA8 = GL_RGBA8,
	RG16 = GL_RG16,
	RG8 = GL_RG8,
	R16 = GL_R16,
	R8 = GL_R8,
	RGBA16_SNORM = GL_RGBA16_SNORM,
	RGBA8_SNORM = GL_RGBA8_SNORM,
	RG16_SNORM = GL_RG16_SNORM,
	RG8_SNORM = GL_RG8_SNORM,
	R16_SNORM = GL_R16_SNORM,
	R8_SNORM = GL_R8_SNORM,
};

enum class BaseInternalFormat
{
	DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	DEPTH_STENCIL = GL_DEPTH_STENCIL,
	RED = GL_RED,
	RG = GL_RG,
	RGB = GL_RGB,
	RGBA = GL_RGBA,
};

enum class SizedInternalFormat
{
	R8 = GL_R8,
	R8_SNORM = GL_R8_SNORM,
	R16 = GL_R16,
	R16_SNORM = GL_R16_SNORM,
	RG8 = GL_RG8,
	RG8_SNORM = GL_RG8_SNORM,
	RG16 = GL_RG16,
	RG16_SNORM = GL_RG16_SNORM,
	R3_G3_B2 = GL_R3_G3_B2,
	RGB4 = GL_RGB4,
	RGB5 = GL_RGB5,
	RGB8 = GL_RGB8,
	RGB8_SNORM = GL_RGB8_SNORM,
	RGB10 = GL_RGB10,
	RGB12 = GL_RGB12,
	RGB16_SNORM = GL_RGB16_SNORM,
	RGBA2 = GL_RGBA2,
	RGBA4 = GL_RGBA4,
	RGB5_A1 = GL_RGB5_A1,
	RGBA8 = GL_RGBA8,
	RGBA8_SNORM = GL_RGBA8_SNORM,
	RGB10_A2 = GL_RGB10_A2,
	RGB10_A2UI = GL_RGB10_A2UI,
	RGBA12 = GL_RGBA12,
	RGBA16 = GL_RGBA16,
	SRGB8 = GL_SRGB8,
	SRGB8_ALPHA8 = GL_SRGB8_ALPHA8,
	R16F = GL_R16F,
	RG16F = GL_RG16F,
	RGB16F = GL_RGB16F,
	RGBA16F = GL_RGBA16F,
	R32F = GL_R32F,
	RG32F = GL_RG32F,
	RGB32F = GL_RGB32F,
	RGBA32F = GL_RGBA32F,
	R11F_G11F_B10F = GL_R11F_G11F_B10F,
	RGB9_E5 = GL_RGB9_E5,
	R8I = GL_R8I,
	R8UI = GL_R8UI,
	R16I = GL_R16I,
	R16UI = GL_R16UI,
	R32I = GL_R32I,
	R32UI = GL_R32UI,
	RG8I = GL_RG8I,
	RG8UI = GL_RG8UI,
	RG16I = GL_RG16I,
	RG16UI = GL_RG16UI,
	RG32I = GL_RG32I,
	RG32UI = GL_RG32UI,
	RGB8I = GL_RGB8I,
	RGB8UI = GL_RGB8UI,
	RGB16I = GL_RGB16I,
	RGB16UI = GL_RGB16UI,
	RGB32I = GL_RGB32I,
	RGB32UI = GL_RGB32UI,
	RGBA8I = GL_RGBA8I,
	RGBA8UI = GL_RGBA8UI,
	RGBA16I = GL_RGBA16I,
	RGBA16UI = GL_RGBA16UI,
	RGBA32I = GL_RGBA32I,
	RGBA32UI = GL_RGBA32UI,
};

enum class CompressedInternalFormat
{
	COMPRESSED_RED = GL_COMPRESSED_RED,
	COMPRESSED_RG = GL_COMPRESSED_RG,
	COMPRESSED_RGB = GL_COMPRESSED_RGB,
	COMPRESSED_RGBA = GL_COMPRESSED_RGBA,
	COMPRESSED_SRGB = GL_COMPRESSED_SRGB,
	COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA,
	COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
	COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
	COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
	COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
	COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,
}; 

enum class CompressedTexImageTarget1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
	PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
};

enum class CompressedTexImageTarget2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP
};

enum class CompressedTexImageTarget3D
{
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
};

enum class TextureSubImageTarget1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
};

enum class CompressedTexSubImageTarget2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
};

enum class CompressedTexSubImageTarget3D
{
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
};

enum class CompressedCopyImageSubData
{
	// 64
	COMPRESSED_RGBA_S3TC_DXT3_EXT = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
	COMPRESSED_RGBA_S3TC_DXT5_EXT = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,
	COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
	COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
	COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,

	// 128
	COMPRESSED_RGB_S3TC_DXT1_EXT = GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
	COMPRESSED_SRGB_S3TC_DXT1_EXT = GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
	COMPRESSED_RGBA_S3TC_DXT1_EXT = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
	COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
	COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
};


enum class UncompressedCopyImageSubData
{
	RGBA32UI = GL_RGBA32UI,
	RGBA32I = GL_RGBA32I,
	RGBA32F = GL_RGBA32F,
	RGBA16UI = GL_RGBA16UI,
	RGBA16I = GL_RGBA16I,
	RGBA16F = GL_RGBA16F,
	RG32F = GL_RG32F,
	RG32UI = GL_RG32UI,
	RG32I = GL_RG32I,
	RGBA16 = GL_RGBA16,
	RGBA16_SNORM = GL_RGBA16_SNORM
};

enum class CopyTexImageTarget1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
};

enum class CopyTexImageTarget2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
};

enum class CopyTexImageTarget3D
{
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
};


enum class CopyInternalFormat
{
	COMPRESSED_RED = GL_COMPRESSED_RED,
	COMPRESSED_RG = GL_COMPRESSED_RG,
	COMPRESSED_RGB = GL_COMPRESSED_RGB,
	COMPRESSED_RGBA = GL_COMPRESSED_RGBA,
	COMPRESSED_SRGB = GL_COMPRESSED_SRGB,
	COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA,
	DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16,
	DEPTH_COMPONENT24 = GL_DEPTH_COMPONENT24,
	DEPTH_COMPONENT32 = GL_DEPTH_COMPONENT32,
	STENCIL_INDEX8 = GL_STENCIL_INDEX8,
	RED = GL_RED,
	RG = GL_RG,
	RGB = GL_RGB,
	R3_G3_B2 = GL_R3_G3_B2,
	RGB4 = GL_RGB4,
	RGB5 = GL_RGB5,
	RGB8 = GL_RGB8,
	RGB10 = GL_RGB10,
	RGB12 = GL_RGB12,
	RGB16 = GL_RGB16,
	RGBA = GL_RGBA,
	RGBA2 = GL_RGBA2,
	RGBA4 = GL_RGBA4,
	RGB5_A1 = GL_RGB5_A1,
	RGBA8 = GL_RGBA8,
	RGB10_A2 = GL_RGB10_A2,
	RGBA12 = GL_RGBA12,
	RGBA16 = GL_RGBA16,
	SRGB = GL_SRGB,
	SRGB8 = GL_SRGB8,
	SRGB_ALPHA = GL_SRGB_ALPHA,
	SRGB8_ALPHA8 = GL_SRGB8_ALPHA8
};

enum class GetCompressedTexImageTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE
};

enum class GetCompressedTexSubImageTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE
};

enum class GetTexLevelTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
	PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
	PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D,
	PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
	PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY,
	PROXY_TEXTURE_RECTANGLE = GL_PROXY_TEXTURE_RECTANGLE,
	PROXY_TEXTURE_2D_MULTISAMPLE = GL_PROXY_TEXTURE_2D_MULTISAMPLE,
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY,
	PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP,
	TEXTURE_BUFFER = GL_TEXTURE_BUFFER
};

enum class GetTexLevelParameterName
{
	TEXTURE_WIDTH = GL_TEXTURE_WIDTH,
	TEXTURE_HEIGHT = GL_TEXTURE_HEIGHT,
	TEXTURE_DEPTH = GL_TEXTURE_DEPTH,
	TEXTURE_INTERNAL_FORMAT = GL_TEXTURE_INTERNAL_FORMAT,
	TEXTURE_RED_SIZE = GL_TEXTURE_RED_SIZE,
	TEXTURE_GREEN_SIZE = GL_TEXTURE_GREEN_SIZE,
	TEXTURE_BLUE_SIZE = GL_TEXTURE_BLUE_SIZE,
	TEXTURE_ALPHA_SIZE = GL_TEXTURE_ALPHA_SIZE,
	TEXTURE_DEPTH_SIZE = GL_TEXTURE_DEPTH_SIZE,
	TEXTURE_COMPRESSED = GL_TEXTURE_COMPRESSED,
	TEXTURE_COMPRESSED_IMAGE_SIZE = GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
	TEXTURE_BUFFER_OFFSET = GL_TEXTURE_BUFFER_OFFSET
};

enum class GetTexParameterName
{
	DEPTH_STENCIL_TEXTURE_MODE = GL_DEPTH_STENCIL_TEXTURE_MODE,
	IMAGE_FORMAT_COMPATIBILITY_TYPE = GL_IMAGE_FORMAT_COMPATIBILITY_TYPE,
	TEXTURE_BASE_LEVEL = GL_TEXTURE_BASE_LEVEL,
	TEXTURE_BORDER_COLOR = GL_TEXTURE_BORDER_COLOR,
	TEXTURE_COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
	TEXTURE_COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC,
	TEXTURE_IMMUTABLE_FORMAT = GL_TEXTURE_IMMUTABLE_FORMAT,
	TEXTURE_IMMUTABLE_LEVELS = GL_TEXTURE_IMMUTABLE_LEVELS,
	TEXTURE_LOD_BIAS = GL_TEXTURE_LOD_BIAS,
	TEXTURE_MAG_FILTER = GL_TEXTURE_MAG_FILTER,
	TEXTURE_MAX_LEVEL = GL_TEXTURE_MAX_LEVEL,
	TEXTURE_MAX_LOD = GL_TEXTURE_MAX_LOD,
	TEXTURE_MIN_FILTER = GL_TEXTURE_MIN_FILTER,
	TEXTURE_MIN_LOD = GL_TEXTURE_MIN_LOD,
	TEXTURE_SWIZZLE_R = GL_TEXTURE_SWIZZLE_R,
	TEXTURE_SWIZZLE_G = GL_TEXTURE_SWIZZLE_G,
	TEXTURE_SWIZZLE_B = GL_TEXTURE_SWIZZLE_B,
	TEXTURE_SWIZZLE_A = GL_TEXTURE_SWIZZLE_A,
	TEXTURE_SWIZZLE_RGBA = GL_TEXTURE_SWIZZLE_RGBA,
	TEXTURE_TARGET = GL_TEXTURE_TARGET,
	TEXTURE_VIEW_MIN_LAYER = GL_TEXTURE_VIEW_MIN_LAYER,
	TEXTURE_VIEW_MIN_LEVEL = GL_TEXTURE_VIEW_MIN_LEVEL,
	TEXTURE_VIEW_NUM_LAYERS = GL_TEXTURE_VIEW_NUM_LAYERS,
	TEXTURE_VIEW_NUM_LEVELS = GL_TEXTURE_VIEW_NUM_LEVELS,
	TEXTURE_WRAP_S = GL_TEXTURE_WRAP_S,
	TEXTURE_WRAP_T = GL_TEXTURE_WRAP_T,
	TEXTURE_WRAP_R = GL_TEXTURE_WRAP_R
};

// 像素格式
enum class TextureSubImageFormat
{
	RED = GL_RED,
	RG = GL_RG,
	RGB = GL_RGB,
	BGR = GL_BGR,
	RGBA = GL_RGBA,
	BGRA = GL_BGRA,
	DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
	DEPTH_STENCIL = GL_DEPTH_STENCIL
};

enum class TexImageTarget1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
	PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
};

enum class TexImageTarget2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP
};

enum class TexImageTarget3D
{
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
};

enum class TexImage2DMultisampleTarget
{
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	PROXY_TEXTURE_2D_MULTISAMPLE = GL_PROXY_TEXTURE_2D_MULTISAMPLE,
};

enum class TexImage3DMultisampleTarget
{
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	PROXY_TEXTURE_2D_MULTISAMPLE = GL_PROXY_TEXTURE_2D_MULTISAMPLE,
};

enum class TexImageStorage1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
	PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D,
};

enum class TexImageStorage2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,

	PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
	PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
	PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP
};

enum class TexImageStorage3D
{
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	PROXY_TEXTURE_CUBE_ARRAY = GL_PROXY_TEXTURE_CUBE_MAP_ARRAY,
};

enum class TexSubImageTarget1D
{
	TEXTURE_1D = GL_TEXTURE_1D,
};

enum class TexSubImageTarget2D
{
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
};

enum class TexSubImageTarget3D
{
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
};

enum class TextureViewFormat
{
	RGBA32F = GL_RGBA32F,
	RGBA32UI = GL_RGBA32UI,
	RGBA32I = GL_RGBA32I,
	RGB32F = GL_RGB32F,
	RGB32UI = GL_RGB32UI,
	RGB32I = GL_RGB32I,
	RGBA16F = GL_RGBA16F,
	RG32F = GL_RG32F,
	RGBA16UI = GL_RGBA16UI,
	RG32UI = GL_RG32UI,
	RGBA16I = GL_RGBA16I,
	RG32I = GL_RG32I,
	RGBA16 = GL_RGBA16,
	RGBA16_SNORM = GL_RGBA16_SNORM,
	RGB16 = GL_RGB16,
	RGB16_SNORM = GL_RGB16_SNORM,
	RGB16F = GL_RGB16F,
	RGB16UI = GL_RGB16UI,
	RGB16I = GL_RGB16I,
	RG16F = GL_RG16F,
	R11F_G11F_B10F = GL_R11F_G11F_B10F,
	R32F = GL_R32F,
	RGB10_A2UI = GL_RGB10_A2UI,
	RGBA8UI = GL_RGBA8UI,
	RG16UI = GL_RG16UI,
	R32UI = GL_R32UI,
	RGBA8I = GL_RGBA8I,
	RG16I = GL_RG16I,
	R32I = GL_R32I,
	RGB10_A2 = GL_RGB10_A2,
	RGBA8 = GL_RGBA8,
	RG16 = GL_RG16,
	RGBA8_SNORM = GL_RGBA8_SNORM,
	RG16_SNORM = GL_RG16_SNORM,
	SRGB8_ALPHA8 = GL_SRGB8_ALPHA8,
	RGB9_E5 = GL_RGB9_E5,
	RGB8 = GL_RGB8,
	RGB8_SNORM = GL_RGB8_SNORM,
	SRGB8 = GL_SRGB8,
	RGB8UI = GL_RGB8UI,
	RGB8I = GL_RGB8I,
	R16F = GL_R16F,
	RG8UI = GL_RG8UI,
	R16UI = GL_R16UI,
	RG8I = GL_RG8I,
	R16I = GL_R16I,
	RG8 = GL_RG8,
	R16 = GL_R16,
	RG8_SNORM = GL_RG8_SNORM,
	R16_SNORM = GL_R16_SNORM,
	R8UI = GL_R8UI,
	R8I = GL_R8I,
	R8 = GL_R8,
	R8_SNORM = GL_R8_SNORM,
	COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
	COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
	COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
	COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
	COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,
};

enum class TextureViewOriginalTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
	TEXTUER_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	TEXTURE_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY
};

enum class TextureViewCompatibleNewTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
	TEXTUER_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	TEXTURE_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY
};

enum class AtomicCounterBufferName
{

};

enum class FrameBufferTarget
{
	DRAW_FRAMEBUFFER = GL_DRAW_FRAMEBUFFER,
	READ_FRAMEBUFFER = GL_READ_FRAMEBUFFER,
	FRAMEBUFFER = GL_FRAMEBUFFER,
};

enum class RenderBufferTarget
{
	RENDERBUFFER = GL_RENDERBUFFER,
};

enum class BiltFrameBufferMask
{
	COLOR_BUFFER_BIT = GL_COLOR_BUFFER_BIT,
	DEPTH_BUFFER_BIT = GL_DEPTH_BUFFER_BIT,
	STENCIL_BUFFER_BIT = GL_STENCIL_BUFFER_BIT,
};

enum class BlitFrameBufferFilter
{
	NEAREST = GL_NEAREST,
	LINEAR = GL_LINEAR,
};

enum class DrawBufferType
{
	NONE = GL_NONE,
	FRONT_LEFT = GL_FRONT_LEFT,
	FRONT_RIGHT = GL_FRONT_RIGHT,
	BACK_LEFT = GL_BACK_LEFT,
	BACK_RIGHT = GL_BACK_RIGHT,
	FRONT_AND_BACK = GL_FRONT_AND_BACK,
};

enum class FramebufferParameterName
{
	FRAMEBUFFER_DEFAULT_WIDTH = GL_FRAMEBUFFER_DEFAULT_WIDTH,
	FRAMEBUFFER_DEFAULT_HEIGHT = GL_FRAMEBUFFER_DEFAULT_HEIGHT,
	FRAMEBUFFER_DEFAULT_LAYERS = GL_FRAMEBUFFER_DEFAULT_LAYERS,
	FRAMEBUFFER_DEFAULT_SAMPLES = GL_FRAMEBUFFER_DEFAULT_SAMPLES,
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS,
};

enum class FramebufferAttachment
{
	COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0,
	COLOR_ATTACHMENT1 = GL_COLOR_ATTACHMENT1,
	COLOR_ATTACHMENT2 = GL_COLOR_ATTACHMENT2,
	COLOR_ATTACHMENT3 = GL_COLOR_ATTACHMENT3,
	COLOR_ATTACHMENT4 = GL_COLOR_ATTACHMENT4,
	COLOR_ATTACHMENT5 = GL_COLOR_ATTACHMENT5,
	COLOR_ATTACHMENT6 = GL_COLOR_ATTACHMENT6,
	COLOR_ATTACHMENT7 = GL_COLOR_ATTACHMENT7,
	COLOR_ATTACHMENT8 = GL_COLOR_ATTACHMENT8,
	COLOR_ATTACHMENT9 = GL_COLOR_ATTACHMENT9,
	COLOR_ATTACHMENT10 = GL_COLOR_ATTACHMENT10,
	COLOR_ATTACHMENT11 = GL_COLOR_ATTACHMENT11,
	COLOR_ATTACHMENT12 = GL_COLOR_ATTACHMENT12,
	COLOR_ATTACHMENT13 = GL_COLOR_ATTACHMENT13,
	COLOR_ATTACHMENT14 = GL_COLOR_ATTACHMENT14,
	COLOR_ATTACHMENT15 = GL_COLOR_ATTACHMENT15,
	DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT,
	STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT,
	DEPTH_STENCIL_ATTACHMENT = GL_DEPTH_STENCIL_ATTACHMENT
};

enum class FramebufferTexTarget
{
	TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
	TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
	TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
	TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
	
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_3D = GL_TEXTURE_3D,
};

enum class MipmapTextureTarget
{
	TEXTURE_1D = GL_TEXTURE_1D,
	TEXTURE_2D = GL_TEXTURE_2D,
	TEXTURE_3D = GL_TEXTURE_3D,
	TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
	TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
	TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
	TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY,
	TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
};

enum class FramebufferAttachmentParameter
{
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
	FRAMEBUFFER_ATTACHMENT_RED_SIZE = GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE,
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,


	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,
	FRAMEBUFFER_ATTACHMENT_LAYERED = GL_FRAMEBUFFER_ATTACHMENT_LAYERED,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER,
};

enum  class AllFramebufferParameterName
{
	FRAMEBUFFER_DEFAULT_WIDTH = GL_FRAMEBUFFER_DEFAULT_WIDTH,
	FRAMEBUFFER_DEFAULT_HEIGHT = GL_FRAMEBUFFER_DEFAULT_HEIGHT,
	FRAMEBUFFER_DEFAULT_LAYERS = GL_FRAMEBUFFER_DEFAULT_LAYERS,
	FRAMEBUFFER_DEFAULT_SAMPLES = GL_FRAMEBUFFER_DEFAULT_SAMPLES,
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS,

	DOUBLEBUFFER = GL_DOUBLEBUFFER,
	IMPLEMENTATION_COLOR_READ_FORMAT = GL_IMPLEMENTATION_COLOR_READ_FORMAT,
	IMPLEMENTATION_COLOR_READ_TYPE = GL_IMPLEMENTATION_COLOR_READ_TYPE,
	SAMPLES = GL_SAMPLES,
	SAMPLE_BUFFERS = GL_SAMPLE_BUFFERS,
	STEREO = GL_STEREO,
};

enum class RenderbufferParameterName
{
	RENDERBUFFER_WIDTH = GL_RENDERBUFFER_WIDTH,
	RENDERBUFFER_HEIGHT = GL_RENDERBUFFER_HEIGHT,
	RENDERBUFFER_INTERNAL_FORMAT = GL_RENDERBUFFER_INTERNAL_FORMAT,
	RENDERBUFFER_SAMPLES = GL_RENDERBUFFER_SAMPLES,
	RENDERBUFFER_RED_SIZE = GL_RENDERBUFFER_RED_SIZE,
	RENDERBUFFER_GREEN_SIZE = GL_RENDERBUFFER_GREEN_SIZE,
	RENDERBUFFER_BLUE_SIZE = GL_RENDERBUFFER_BLUE_SIZE,
	RENDERBUFFER_ALPHA_SIZE = GL_RENDERBUFFER_ALPHA_SIZE,
	RENDERBUFFER_DEPTH_SIZE = GL_RENDERBUFFER_DEPTH_SIZE,
	RENDERBUFFER_STENCIL_SIZE = GL_RENDERBUFFER_STENCIL_SIZE,
};