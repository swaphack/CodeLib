#pragma once

#include "system.h"
#include "CtrlWidget.h"

namespace render
{
	// 编辑输入状态
	enum class EditInputStatus
	{
		BEGIN,	// 开始输入
		END,	// 输入结束
	};
	typedef void(*EDITINPUT_DELEGATE_HANDLER)(sys::Object* object, EditInputStatus status);

	#define EDITINPUT_DELEGATTE_SELECTOR(HANDLER_SEL) static_cast<EDITINPUT_DELEGATE_HANDLER>(&HANDLER_SEL)

	// 编辑框
	class CtrlEditBox : public CtrlWidget
	{
	public:
		CtrlEditBox();
		virtual ~CtrlEditBox();
	public:
		virtual void draw();
	public:
		// 设置键盘是否相应
		void setKeyboardEnable(bool status);
		// 获取键盘相应状态
		bool isKeyboardEnable();
		// 设置输入监听事件
		void setInputListen(EDITINPUT_DELEGATE_HANDLER handler);
		// 输出操作处理
		virtual void onInputHand(sys::BoardKey key, sys::ButtonStatus type) {}
	protected:
		// 派发输入监听
		void dispatchInputListen(EditInputStatus status);
		// 添加键盘监听委托
		void addKeyboardDelegate();
		// 移除键盘监听委托
		void removeKeyboardDelegate();
	protected:
		void onTouchUp(Node* node, float x, float y, bool include);
		void onKeyBoardInput(Node* node, sys::BoardKey key, sys::ButtonStatus type);
	private:
		// 键盘是否可用
		bool _keyboardEnabled = false;
		// 编辑输入空间监听
		EDITINPUT_DELEGATE_HANDLER _editInputHandler;
	};
}